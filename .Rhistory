OpenMLMasterData <-
OpenMLMasterData[, c(-1, -2, -4,-6,-7, -44. -45, -46, -47)]
colMeans(is.na(OpenMLMasterData))
options(scipen=999)
colMeans(is.na(OpenMLMasterData))
as.data.frame(colMeans(is.na(OpenMLMasterData)))
colMeans(is.na(OpenMLMasterData))
names(OpenMLMasterData)
OpenMLMasterData <- OpenMLMasterData[,c( -data.id, -name, -status, -format  )]
OpenMLMasterData <-
OpenMLMasterData[, c(1, 2, 3, 38, 41, 42, 50:59  )]
names(OpenMLMasterData)
names(OpenMLMasterData01)
library(plyr)
OpenMLMasterData02 <- rbind(OpenMLMasterData01, OpenMLMasterData)
OpenMLMasterData03 <- rbind.fill(OpenMLMasterData01, OpenMLMasterData)
colMeans(is.na(OpenMLMasterData03))
as.data.frame(table(OpenMLMasterData03$task.type))
rm(OpenMLMasterData, OpenMLMasterData01)
OpenMLRunEvaluationsData <- as.data.table(OpenMLRunEvaluationsSet02)
MLRRunEvaluationsData <-
OpenMLRunEvaluationsData[grepl("mlr", OpenMLRunEvaluationsData$flow_name), ]
wideDataFormula = run_id + task_id + flow_name + setup_id + flow_id + data_name + upload_time ~ fun
OpenMLWideData = data.table::dcast(
data = OpenMLRunEvaluationsData,
formula = wideDataFormula,
value.var = c("value"),
fun.aggregate = mean
)
rm(OpenMLRunEvaluationsSet02)
rm(OpenMLRunEvaluationsData)
rm(nm)
wideDataFormula = run_id + task_id + flow_name + setup_id + flow_id + data_name + upload_time ~ fun
OpenMLWideData = data.table::dcast(
data = OpenMLRunEvaluationsData,
formula = wideDataFormula,
value.var = c("value"),
fun.aggregate = mean
)
i
library(data.table)
library(rpart)
library(rpart.plot)
OpenMLWideData = data.table::dcast(
data = OpenMLRunEvaluationsData,
formula = wideDataFormula,
value.var = c("value"),
fun.aggregate = mean
)
unique(MLRRunEvaluationsData$flow_name)
OpenMLWideData = data.table::dcast(
data = MLRRunEvaluationsData,
formula = wideDataFormula,
value.var = c("value"),
fun.aggregate = mean
)
OpenMLMasterData <-
merge(x = OpenMLWideData,
y = tasks,
by.x = "task_id",
by.y = "task.id")
names(OpenMLMasterData)
# Removing unwanted fields
OpenMLMasterData <-
OpenMLMasterData[, c(-1, -2, -4,-6,-7,    -9,-24,-25,-30,-31,-32,-33)]
colMeans(is.na(OpenMLMasterData))
names(OpenMLMasterData)
# Removing mostly empty fields
OpenMLMasterData <-
OpenMLMasterData[, c(1, 2, 3, 21 , 22, 31:40)]
OpenMLMasterData <- rbind.fill(OpenMLMasterData03, OpenMLMasterData)
library(plyr)
OpenMLMasterData <- rbind.fill(OpenMLMasterData03, OpenMLMasterData)
rm(OpenMLWideData, OpenMLMasterData03, MLRRunEvaluationsData)
str(OpenMLMasterData)
OpenMLMasterData$flow_id <- as.factor(OpenMLMasterData$flow_id)
OpenMLMasterData$flow_name <- as.factor(OpenMLMasterData$flow_name)
OpenMLMasterData$task.type <- as.factor(OpenMLMasterData$task.type)
OpenMLMasterData$estimation.procedure <-
as.factor(OpenMLMasterData$estimation.procedure)
OpenMLMasterData$target.feature <-
as.factor(OpenMLMasterData$target.feature)
# adding augmented columns
OpenMLMasterData$flow_name_fixed <-
gsub("\\s*\\([^\\)]+\\)", "", OpenMLMasterData$flow_name)
OpenMLMasterData$flow_name_fixed <-
as.factor(OpenMLMasterData$flow_name_fixed)
OpenMLMasterData$AreaUnderCurveRounded <-
round(OpenMLMasterData$area_under_roc_curve * 10)
str(OpenMLMasterData)
d<_
d<- duplicated(OpenMLMasterData)
d
table(d)
OpenMLMasterData[1:2,]
which(d)
names(OpenMLMasterData)
predictorFormula <-
flow_name_fixed ~
AreaUnderCurveRounded +
majority.class.size +
max.nominal.att.distinct.values +
minority.class.size +
number.of.classes +
number.of.features +
number.of.instances +
number.of.instances.with.missing.values +
number.of.missing.values +
number.of.numeric.features +
number.of.symbolic.features
set.seed(1)
# Data Splitting
training <-
sample(nrow(OpenMLMasterData), nrow(OpenMLMasterData) * 0.8)
OpenMLMasterTrainingData <- OpenMLMasterData[training, ]
predictorFormula <-
flow_name_fixed ~
AreaUnderCurveRounded +
majority.class.size +
max.nominal.att.distinct.values +
minority.class.size +
number.of.classes +
number.of.features +
number.of.instances +
number.of.instances.with.missing.values +
number.of.missing.values +
number.of.numeric.features +
number.of.symbolic.features
fit <-
rpart(
predictorFormulaNaive,
method = "class",
data = OpenMLMasterTrainingData,
control = rpart.control(cp = 0.0025)
)
fit <-
rpart(
predictorFormula,
method = "class",
data = OpenMLMasterTrainingData
)
rpart.plot::rpart.plot(fit, extra = 100)
dedup <- OpenMLMasterData[!duplicated(OpenMLMasterData), ]
data01 <- read.csv("./data/OpenMLData01.csv")
data02 <- read.csv("./data/OpenMLData02.csv")
data <- rbind(data01, data02)
table(duplicated(data))
rm(list=ls())
data01 <- read.csv("./data/OpenMLData01.csv")
data02 <- read.csv("./data/OpenMLData02.csv")
classificationData <- rbind(data01, data02)
names(classificationData)
colMeans(is.na(classificationData))
options(scipen=999)
colMeans(is.na(classificationData))
str(classificationData)
unique(classificationData$flow_name)
# adding augmented columns
classificationData$flow_name_fixed <-
gsub("\\s*\\([^\\)]+\\)", "", classificationData$flow_name)
classificationData$flow_name_fixed <-
as.factor(classificationData$flow_name_fixed)
str(classificationData)
set.seed(1)
rm(data01, data02)
# Data Splitting
training <-
sample(nrow(classificationData), nrow(classificationData) * 0.8)
OpenMLMasterTrainingData <- classificationData[training, ]
predictorFormulaNaive <-
area_under_roc_curve ~
flow_name_fixed
fit <-
rpart(
predictorFormulaNaive,
method = "anova",
data = OpenMLMasterTrainingData
)
library(rpart)
library(rpart.plot)
fit <-
rpart(
predictorFormulaNaive,
method = "anova",
data = OpenMLMasterTrainingData
)
rpart.plot::rpart.plot(fit, extra = 100)
predictorFormulaNaive <-
area_under_roc_curve ~
flow_name_fixed +
majority.class.size +
minority.class.size +
number.of.classes +
number.of.features
fit <-
rpart(
predictorFormulaNaive,
method = "anova",
data = OpenMLMasterTrainingData
)
rpart.plot::rpart.plot(fit, extra = 100)
predictorFormulaNaive <-
area_under_roc_curve ~
flow_name_fixed +
majority.class.size +
minority.class.size +
number.of.classes +
number.of.features +
number.of.instances +
number.of.instances.with.missing.values +
number.of.missing.values +
number.of.numeric.features +
number.of.symbolic.features
fit <-
rpart(
predictorFormulaNaive,
method = "anova",
data = OpenMLMasterTrainingData
)
rpart.plot::rpart.plot(fit, extra = 100)
rpart.rules(fit)
?rpart.control
fit2 <-
rpart(
predictorFormulaNaive,
method = "anova",
data = OpenMLMasterTrainingData,
control = rpart.control(cp = 0.05)
)
rpart.plot::rpart.plot(fit2, extra = 100)
fit2 <-
rpart(
predictorFormulaNaive,
method = "anova",
data = OpenMLMasterTrainingData,
control = rpart.control(cp = 0.03)
)
rpart.plot::rpart.plot(fit2, extra = 100)
fit2 <-
rpart(
predictorFormulaNaive,
method = "anova",
data = OpenMLMasterTrainingData,
control = rpart.control(cp = 0.02)
)
rpart.plot::rpart.plot(fit2, extra = 100)
fit2 <-
rpart(
predictorFormulaNaive,
method = "anova",
data = OpenMLMasterTrainingData,
control = rpart.control(cp = 0.025)
)
rpart.plot::rpart.plot(fit2, extra = 100)
print(fit)
summary(fit)
plot(fit)
text(fit)
plot(fit2); text(fit2)
plot(fit2)
text(fit2)
plot(fit)
text(fit)
rpart.plot::rpart.plot(fit, extra = 100)
?post
post(fit)
post(fit, filename = "")
library(rattle)
fancyRpartPlot(fit)
OpenMLMasterTestingData <- OpenMLMasterData[-training, ]
OpenMLMasterTestingData <- classificationData[-training, ]
715178+715178
715178+178795
Prediction <- predict(fit, OpenMLMasterTestingData, type = "anova")
?predict
Prediction <- predict(fit, OpenMLMasterTestingData, type = "vector")
Prediction
class(Prediction)
Prediction <- predict(fit, OpenMLMasterTestingData, type = "prob")
Prediction <- predict(fit, OpenMLMasterTestingData, type = "matrix")
Prediction
OpenMLMasterTestingData$X
submit <- data.frame(AUC.actual = OpenMLMasterTestingData$area_under_roc_curve, AUC.predicted = Prediction)
submit
d <- submit[order(submit$AUC.actual), ]
d
names(OpenMLMasterTestingData)
OpenMLMasterTestingData[,c(-1,4)]
OpenMLMasterTestingData[,c(-1,-4)]
r <- OpenMLMasterTestingData[,c(-1,-4)]
names(r)
Prediction2 <- predict(fit, d, type = "vector")
Prediction2 <- predict(fit, r, type = "vector")
Prediction
head(Prediction)
head(Prediction2)
rmse = function(predictions, targets){
cat("===RMSE readout of intermediate steps:===\n")
cat("the errors: (predictions - targets) is: ",
toString(predictions - targets), '\n')
cat("the squares: (predictions - targets) ** 2 is: ",
toString((predictions - targets) ** 2), '\n')
cat("the means: (mean((predictions - targets) ** 2)) is: ",
toString(mean((predictions - targets) ** 2)), '\n')
cat("the square root: (sqrt(mean((predictions - targets) ** 2))) is: ",
toString(sqrt(mean((predictions - targets) ** 2))), '\n')
return(sqrt(mean((predictions - targets) ** 2)))
}
cat("final answer rmse: ", rmse(d$AUC.predicted, d$AUC.actual), "\n")
range(d$AUC.actual)
0.1071104
head(d)
library(ggplot2)
# Make the plot
ggplot(data=d, aes(x=AUC.actual, y=AUC.predicted, fill=type, linetype=type)) +
geom_line() +
geom_ribbon(alpha=0.5)
# Make the plot
ggplot(data=d, aes(x=AUC.actual, y=AUC.predicted)) +
geom_line() +
geom_ribbon(alpha=0.5)
# Make the plot
ggplot(data=d, aes(x=AUC.actual, y=AUC.predicted, ymin=0, ymax=1)) +
geom_line() +
geom_ribbon(alpha=0.5)
# Make the plot
ggplot(data=d, aes( y=AUC.predicted, ymin=0, ymax=1)) +
geom_line() +
geom_ribbon(alpha=0.5)
plot(d$AUC.predicted,d$AUC.actual,
xlab="predicted",ylab="actual")
str(d)
plot(d$AUC.actual,d$AUC.predicted,
xlab="predicted",ylab="actual")
abline(a=0,b=1)
d$index <- 1:178795
d
# Make the plot
ggplot(data=d, aes(x=index, y=AUC.actual, ymin=0, ymax=1)) +
geom_line() +
geom_ribbon(alpha=0.5)
# Make the plot
ggplot(data=d, aes(index)) +
geom_line(aes(y = AUC.actual, colour = "AUC.actual")) +
geom_line(aes(y = AUC.predicted, colour = "AUC.predicted")) +
)
# Make the plot
ggplot(data=d, aes(index)) +
geom_line(aes(y = AUC.actual, colour = "AUC.actual")) +
geom_line(aes(y = AUC.predicted, colour = "AUC.predicted"))
logistic.learner <- makeLearner("regr.randomForest", predict.type = "se")
library(mlr)
OpenMLMasterTestingDataNoNAs <- OpenMLMasterTestingData[complete.cases(OpenMLMasterTestingData[,c(-7)]), ]
OpenMLMasterTrainingDataNoNAs <- OpenMLMasterTrainingData[complete.cases(OpenMLMasterTrainingData[,c(-7)]), ]
trainTask <- makeRegrTask(data = OpenMLMasterTrainingDataNoNAs,target = "area_under_roc_curve")
testTask <- makeRegrTask(data = OpenMLMasterTestingDataNoNAs, target = "area_under_roc_curve")
trainTask <- normalizeFeatures(trainTask,method = "standardize")
testTask <- normalizeFeatures(testTask,method = "standardize")
trainTask <- dropFeatures(task = trainTask,features = c("X","flow_name", "flow_id", "task.type"))
trainTask <- dropFeatures(task = trainTask,features = c("evaluation.measures"))
logistic.learner <- makeLearner("regr.randomForest", predict.type = "se")
# regr.fnn regr.gbm  regr.glm  kknn  nnet regr.randomForest regr.ranger  regr.xgboost  regr.ksvm
fmodel <- train(logistic.learner,trainTask)
library(mlr)
# regr.fnn regr.gbm  regr.glm  kknn  nnet regr.randomForest regr.ranger  regr.xgboost  regr.ksvm
fmodel <- train(logistic.learner,trainTask)
logistic.learner <- makeLearner("regr.nnet", predict.type = "se")
?makeLearner
logistic.learner <- makeLearner("regr.nnet", predict.type = "response")
# regr.fnn regr.gbm  regr.glm  kknn  nnet  regr.ranger  regr.xgboost  regr.ksvm
fmodel <- train(logistic.learner,trainTask)
fpmodel <- predict(fmodel, testTask)
fpmodel$data$response
str(OpenMLMasterTrainingDataNoNAs$flow_name)
summary(OpenMLMasterTrainingDataNoNAs$flow_name)
summary(OpenMLMasterTrainingDataNoNAs$flow_name_fixed)
summary(as.factor(OpenMLMasterTrainingDataNoNAs$flow_name_fixed))
summary(as.factor(as.character(OpenMLMasterTrainingDataNoNAs$flow_name_fixed)))
class(OpenMLMasterTrainingDataNoNAs$flow_name_fixed)
levels(OpenMLMasterTrainingDataNoNAs$flow_name_fixed)
levels(droplevels(OpenMLMasterTrainingDataNoNAs$flow_name_fixed))
OpenMLMasterTrainingDataNoNAs$flow_name_fixed = droplevels(OpenMLMasterTrainingDataNoNAs$flow_name_fixed)
levels(OpenMLMasterTrainingDataNoNAs)
levels(OpenMLMasterTrainingDataNoNAs$flow_name_fixed)
id <- which(!(OpenMLMasterTestingDataNoNAs$flow_name_fixed %in% levels (OpenMLMasterTrainingDataNoNAs$flow_name_fixed))
)
OpenMLMasterTrainingDataNoNAs$flow_name_fixed = droplevels(OpenMLMasterTrainingDataNoNAs$flow_name_fixed)
id <- which(!(OpenMLMasterTestingDataNoNAs$flow_name_fixed %in% levels (OpenMLMasterTrainingDataNoNAs$flow_name_fixed)))
OpenMLMasterTestingDataNoNAs$flow_name_fixed[id] <- NA
OpenMLMasterTrainingDataNoNAs <- OpenMLMasterTrainingData[complete.cases(OpenMLMasterTrainingData[,c(-7)]), ]
OpenMLMasterTestingDataNoNAs <- OpenMLMasterTestingData[complete.cases(OpenMLMasterTestingData[,c(-7)]), ]
trainTask <- makeRegrTask(data = OpenMLMasterTrainingDataNoNAs,target = "area_under_roc_curve")
levels(OpenMLMasterTrainingDataNoNAs)
levels(OpenMLMasterTrainingDataNoNAs$flow_name_fixed)
OpenMLMasterTrainingDataNoNAs$flow_name_fixed = droplevels(OpenMLMasterTrainingDataNoNAs$flow_name_fixed)
levels(OpenMLMasterTrainingDataNoNAs$flow_name_fixed)
id <- which(!(OpenMLMasterTestingDataNoNAs$flow_name_fixed %in% levels (OpenMLMasterTrainingDataNoNAs$flow_name_fixed)))
OpenMLMasterTestingDataNoNAs$flow_name_fixed[id] <- NA
OpenMLMasterTrainingDataNoNAs <- OpenMLMasterTrainingData[complete.cases(OpenMLMasterTrainingData[,c(-7)]), ]
OpenMLMasterTestingDataNoNAs <- OpenMLMasterTestingData[complete.cases(OpenMLMasterTestingData[,c(-7)]), ]
trainTask <- makeRegrTask(data = OpenMLMasterTrainingDataNoNAs,target = "area_under_roc_curve")
testTask <- makeRegrTask(data = OpenMLMasterTestingDataNoNAs, target = "area_under_roc_curve")
trainTask <- normalizeFeatures(trainTask,method = "standardize")
testTask <- normalizeFeatures(testTask,method = "standardize")
trainTask <- dropFeatures(task = trainTask,features = c("X","flow_name", "flow_id", "task.type"))
trainTask <- dropFeatures(task = trainTask,features = c("evaluation.measures"))
logistic.learner <- makeLearner("regr.nnet", predict.type = "response")
# regr.fnn regr.gbm  regr.glm  kknn  nnet  regr.ranger  regr.xgboost  regr.ksvm
fmodel <- train(logistic.learner,trainTask)
fpmodel <- predict(fmodel, testTask)
OpenMLMasterTrainingDataNoNAs <- OpenMLMasterTrainingData[complete.cases(OpenMLMasterTrainingData[,c(-7)]), ]
OpenMLMasterTestingDataNoNAs <- OpenMLMasterTestingData[complete.cases(OpenMLMasterTestingData[,c(-7)]), ]
OpenMLMasterTrainingDataNoNAs$flow_name_fixed = droplevels(OpenMLMasterTrainingDataNoNAs$flow_name_fixed)
id <- which(!(OpenMLMasterTestingDataNoNAs$flow_name_fixed %in% levels (OpenMLMasterTrainingDataNoNAs$flow_name_fixed)))
OpenMLMasterTestingDataNoNAs$flow_name_fixed[id] <- NA
OpenMLMasterTrainingDataNoNAs <- OpenMLMasterTrainingData[complete.cases(OpenMLMasterTrainingData[,c(-7)]), ]
OpenMLMasterTestingDataNoNAs <- OpenMLMasterTestingData[complete.cases(OpenMLMasterTestingData[,c(-7)]), ]
OpenMLMasterTrainingDataNoNAs$flow_name_fixed = droplevels(OpenMLMasterTrainingDataNoNAs$flow_name_fixed)
id <- which(!(OpenMLMasterTestingDataNoNAs$flow_name_fixed %in% levels (OpenMLMasterTrainingDataNoNAs$flow_name_fixed)))
id
OpenMLMasterTestingDataNoNAs$flow_name_fixed[id] <- NA
id <- which(!(OpenMLMasterTestingDataNoNAs$flow_name_fixed %in% levels (OpenMLMasterTrainingDataNoNAs$flow_name_fixed)))
colMeans(is.na(OpenMLMasterTestingDataNoNAs))
View(OpenMLMasterTestingData)
OpenMLMasterTestingDataNoNAs <- OpenMLMasterTestingDataNoNAs[complete.cases(OpenMLMasterTestingDataNoNAs), ]
colMeans(is.na(OpenMLMasterTestingDataNoNAs))
OpenMLMasterTrainingDataNoNAs <- OpenMLMasterTrainingData[complete.cases(OpenMLMasterTrainingData[,c(-7)]), ]
OpenMLMasterTestingDataNoNAs <- OpenMLMasterTestingData[complete.cases(OpenMLMasterTestingData[,c(-7)]), ]
OpenMLMasterTrainingDataNoNAs$flow_name_fixed = droplevels(OpenMLMasterTrainingDataNoNAs$flow_name_fixed)
id <- which(!(OpenMLMasterTestingDataNoNAs$flow_name_fixed %in% levels (OpenMLMasterTrainingDataNoNAs$flow_name_fixed)))
OpenMLMasterTestingDataNoNAs$flow_name_fixed[id] <- NA
OpenMLMasterTestingDataNoNAs <- OpenMLMasterTestingDataNoNAs[complete.cases(OpenMLMasterTestingDataNoNAs[,c(-7)]), ]
colMeans(is.na(OpenMLMasterTestingDataNoNAs))
id <- which(!(OpenMLMasterTestingDataNoNAs$flow_name_fixed %in% levels (OpenMLMasterTrainingDataNoNAs$flow_name_fixed)))
id
trainTask <- makeRegrTask(data = OpenMLMasterTrainingDataNoNAs,target = "area_under_roc_curve")
testTask <- makeRegrTask(data = OpenMLMasterTestingDataNoNAs, target = "area_under_roc_curve")
trainTask <- normalizeFeatures(trainTask,method = "standardize")
testTask <- normalizeFeatures(testTask,method = "standardize")
trainTask <- dropFeatures(task = trainTask,features = c("X","flow_name", "flow_id", "task.type"))
trainTask <- dropFeatures(task = trainTask,features = c("evaluation.measures"))
logistic.learner <- makeLearner("regr.lm", predict.type = "response")
# regr.fnn regr.gbm  regr.glm  kknn  nnet  regr.ranger  regr.xgboost  regr.ksvm
fmodel <- train(logistic.learner,trainTask)
install.packages("mlr")
ggplot(data=d, aes(index)) +
geom_line(aes(y = AUC.actual, colour = "AUC.actual")) +
geom_line(aes(y = AUC.predicted, colour = "AUC.predicted")) +
ylim(0, 1)
library(ggplot2)
ggplot(data=d, aes(index)) +
geom_line(aes(y = AUC.actual, colour = "AUC.actual")) +
geom_line(aes(y = AUC.predicted, colour = "AUC.predicted")) +
ylim(0, 1)
rm(list=ls())
data01 <- read.csv("OpenMLRunEvaluationsSet01.csv")
data01 <- read.csv("./data/OpenMLRunEvaluationsSet01.csv")
names(data01)
OpenMLRunEvaluationsData <- as.data.table(data01)
library(data.table)
OpenMLRunEvaluationsData <- as.data.table(data01)
setnames(OpenMLRunEvaluationsData, "function", "fun")
setnames(OpenMLRunEvaluationsData, "function.", "fun")
wideDataFormula = run_id + task_id + flow_name + setup_id + flow_id + data_name + upload_time ~ fun
OpenMLWideData = data.table::dcast(
data = MLRRunEvaluationsData,
formula = wideDataFormula,
value.var = c("value"),
fun.aggregate = mean
)
OpenMLWideData = data.table::dcast(
data = OpenMLRunEvaluationsData,
formula = wideDataFormula,
value.var = c("value"),
fun.aggregate = mean
)
names(OpenMLWideData)
colMeans(is.na(OpenMLWideData))
OpenMLRunEvaluationsData <- OpenMLWideData[,c(1,2,3,6,10,11,2329,32,33,34)]
OpenMLRunEvaluationsData <- as.data.frame(OpenMLWideData)[,c(1,2,3,6,10,11,2329,32,33,34)]
OpenMLRunEvaluationsData <- as.data.frame(OpenMLWideData)
OpenMLRunEvaluationsData <- OpenMLRunEvaluationsData[,c(1,2,3,6,10,11,23,29,32,33,34)]
colMeans(is.na(OpenMLRunEvaluationsData))
d <- is.na(OpenMLRunEvaluationsData$usercpu_time_millis)
table(d)
names(data01)
data01$flow_name_fac <- as.factor(data01$flow_name)
OpenMLRunEvaluationsData$flow_name_fac <- as.factor(OpenMLRunEvaluationsData$flow_name)
# adding augmented columns
OpenMLRunEvaluationsData$flow_name_fixed <-
gsub("\\s*\\([^\\)]+\\)", "", OpenMLRunEvaluationsData$flow_name)
OpenMLMasterData$flow_name_fixed <-
as.factor(OpenMLMasterData$flow_name_fixed)
OpenMLRunEvaluationsData$flow_name_fixed <-
as.factor(OpenMLRunEvaluationsData$flow_name_fixed)
d <- OpenMLRunEvaluationsData[!is.na(OpenMLRunEvaluationsData$usercpu_time_millis),]
d$usercpu_time_millis
d$usercpu_time_minute <- d$usercpu_time_millis / 60 / 1000
d$usercpu_time_minute
options(scipen=999)
d$usercpu_time_minute
?round
signif(d$usercpu_time_minute, digits = 3)
names(d)
ggplot(d, aes(x=flow_name, y=usercpu_time_millis)) +
geom_boxplot(width = 1)
ggplot(d, aes(x=flow_name_fac, y=usercpu_time_millis)) +
geom_boxplot(width = 1)
ggplot(d, aes(x=flow_name, group=flow_name_fac, y=usercpu_time_millis)) +
geom_boxplot(width = 1)
ggplot(d, aes(x=flow_name, group=flow_name_fac, fill=flow_name_fac, y=usercpu_time_millis)) +
geom_boxplot(width = 1)
