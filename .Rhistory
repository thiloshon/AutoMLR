fun.aggregate = sum
)
evals = data.table::dcast(
data = evals,
formula = form,
value.var = c("value", "array_data")
)
evals <- as.data.table(OpenMLRunEvaluations)
form = run_id + task_id + setup_id + flow_id + flow_name + data_name + upload_time ~ fun
evals = data.table::dcast(
data = evals,
formula = form,
value.var = c("value", "array_data"),
fun.aggregate = list(sum, mean)
)
evals = data.table::dcast(
data = evals,
formula = form,
value.var = c("value", "array_data"),
fun.aggregate = sum
)
evals = data.table::dcast(
data = evals,
formula = form,
value.var = c("value", "array_data"),
fun.aggregate = mean
)
evals = data.table::dcast(
data = evals,
formula = form,
value.var = c("value", "array_data"),
fun.aggregate = sum
)
evals = data.table::dcast(
data = evals,
formula = form,
value.var = c("value", "array_data"),
fun = sum
)
install.packages("arules")
library(arulse)
library(arules)
mining <- ruleInduction(evals)
?ruleInduction
data("Adults")
data("Adult")
write.csv(OpenMLRunEvaluations, "data/")
write.csv(OpenMLRunEvaluations, "./data/OpenMLRunEvaluations.csv")
class(OpenMLRunEvaluations)
names(OpenMLRunEvaluations)
OpenMLRunEvaluations$array_data[1:10]
write.csv(OpenMLRunEvaluations[,1:9], "./data/OpenMLRunEvaluations.csv")
rm(evals)
rm(Adult, datasets, res, run.results1, arr.ind, files, form, ids, nm, path, str2)
names(task)
names(tasks)
names(OpenMLRunEvaluations)
length(unique(OpenMLRunEvaluations$flow_id))
length(unique(OpenMLRunEvaluations$flow_name))
tidyData <- OpenMLRunEvaluations[,c(-5)]
names(tidyData)
unique(OpenMLRunEvaluations$array_data)
names(tidyData)
tidyData <- OpenMLRunEvaluations[,c(-9)]
head(tidyData)
tidyData <- OpenMLRunEvaluations[,c(-5)]
tidyData <- tidyData[,c(-9)]
head(tidyData)
write.csv(tidyData, "./data/OpenMLRunEvaluationsSample.csv")
sampledata <- tidyData[sample(nrow(tidyData), nrow(tidyData)*0.01), ]
write.csv(sampledata, "./data/OpenMLRunEvaluationsSample.csv")
tr <- read.transactions("./data/OpenMLRunEvaluationsSample.csv", format = "basket", sep=",", skip = 1)
library(arules)
tr <- read.transactions("./data/OpenMLRunEvaluationsSample.csv", format = "basket", sep=",", skip = 1)
rules <- apriori (tr, parameter = list(supp = 0.001, conf = 0.5))
itemFrequencyPlot(tr, topN=10, type="absolute", main="Item Frequency") # plot frequent items
frequentItems <- eclat (tr, parameter = list(supp = 0.07, maxlen = 15)) # calculates support for frequent items
mining <- ruleInduction(tr)
mining <- rulesInduction(tr)
rules_conf <- sort (rules, by="confidence", decreasing=TRUE)
inspect(head(rules_conf))
size(rules_conf)
mining <- rulesInduction(tr)
mining <- ruleInduction(tr)
max(size(rules_conf))
rules_conf
inspect(rules_conf)
frequentItems
inspect(frequentItems)
rules_lift <- sort (rules, by="lift", decreasing=TRUE) # 'high-lift' rules.
inspect(head(rules_lift))
head(sampledata$flow_id)
rules <- apriori (data=tr, parameter=list (supp=0.001,conf = 0.15,minlen=2), appearance = list(default="rhs",rhs="8330"), control = list (verbose=F)) # those who bought 'milk' also bought..
rules_conf <- sort (rules, by="confidence", decreasing=TRUE) # 'high-confidence' rules.
inspect(head(rules_conf))
names(sampledata)
names(tasks)
df1 = data.frame(CustomerId=c(1:10),
Hobby = c(rep("sing", 4), rep("pingpong", 3), rep("hiking", 3)),
Product=c(rep("Toaster",3),rep("Phone", 2), rep("Radio",3), rep("Stereo", 2)))
df2 = data.frame(CustomerId=c(2,4,6, 8, 10),State=c(rep("Alabama",2),rep("Ohio",1),   rep("Cal", 2)),
like=c("sing", 'hiking', "pingpong", 'hiking', "sing"))
df3 = merge(df1, df2, by.x=c("CustomerId", "Hobby"), by.y=c("CustomerId", "like"))
df1
df2
df3
df3 = merge(df1, df2, by.x=c("CustomerId"), by.y=c("CustomerId"))
df3
merge(df2, df1, by.x=c("CustomerId"), by.y=c("CustomerId"))
x <- data.frame(k1=c(NA,NA,3,4,5), k2=c(1,NA,NA,4,5), data=1:5)
y <- data.frame(k1=c(NA,2,NA,4,5), k2=c(NA,NA,3,4,5), data=1:5)
merge(x, y, by=c("k1","k2"))
x
y
merge(x = df1, y = df2, by = "CustomerId", all = TRUE)
?merge
wideData <- merge(x = sampledata, y = tasks, by.x = "task_id", by.y = "task.id")
names(wideData)
wideData[,c(5,11)]
names(wideData)
str(wideData)
cleanWideData <- wideData[,c(-5, -11, -12, -13)]
wideData$fun <- as.factor(wideData$fun)
as.Date("2017-07-14 00:57:16")
as.Date.POSIXct("2017-07-14 00:57:16")
as.Date.POSIXlt ("2017-07-14 00:57:16")
as.Date.default("2017-07-14 00:57:16")
as.POSIXct("2017-07-14 00:57:16",format="%Y-%m-%dT%H:%M:%OS")
as.POSIXct("2017-07-14 00:57:16",format="%Y-%m-%d %H:%M:%OS")
cleanWideData$upload_time <- as.POSIXct(cleanWideData$upload_time,format="%Y-%m-%d %H:%M:%OS")
wideData$task.type <- as.factor(wideData$task.type)
wideData$estimation.procedure <- as.factor(wideData$estimation.procedure)
wideData$evaluation.measures <- as.factor(wideData$evaluation.measures)
wideData$target.feature <- as.factor(wideData$target.feature)
wideData$task_id <- as.factor(wideData$task_id)
wideData$run_id <- as.factor(wideData$run_id)
wideData$setup_id <- as.factor(wideData$setup_id)
wideData$flow_id <- as.factor(wideData$flow_id)
cleanWideData <- wideData[,c(-5, -11, -12, -13)]
cleanWideData$upload_time <- as.POSIXct(cleanWideData$upload_time,format="%Y-%m-%d %H:%M:%OS")
str(cleanWideData)
cleanWideData$data.id <- as.factor(cleanWideData$data.id)
library(rpart)
names(cleanWideData)
fit <- rpart(value ~ task_id + run_id + setup_id + flow_id + fun + upload_time + task.type + data.id + , data = cleanWideData)
fit <- rpart(value ~ task_id + run_id + setup_id + flow_id + fun + upload_time + task.type + data.id , data = cleanWideData)
plot(fit)
par(mfrow = c(1,2), xpd = NA)
plot(fit)
text(fit, use.n = TRUE)
plot(fit)
library( rpart.plot)
install.packages("rpart.plot")
library( rpart.plot)
rpart.plot(fit)
rpart.rules(fit)
fit <- rpart(value ~ + flow_id + fun + task.type , data = cleanWideData)
library(rpart)
plot.rpart(fit)
plot(fit)
rm(df1, df2, df3, frequentItems, re, rules, rules_lift, rules_conf, )
rm(tr, x, y, tidyData)
str(OpenMLRunEvaluations)
OpenMLRunEvaluations[1]
OpenMLRunEvaluations[1,]
listOMLRunEvaluations(run.id=25)
library(OpenML)
listOMLRunEvaluations(run.id=25)
unique(OpenMLRunEvaluations$flow_name)
as.data.frame(table(OpenMLRunEvaluations$flow_name))
head(as.data.frame(table(OpenMLRunEvaluations$flow_name)))
flow <- as.data.frame(table(OpenMLRunEvaluations$flow_name))
flow[order(flow$Freq),]
flow[order(-flow$Freq),]
unique(flow$Freq)
sort(unique(flow$Freq))
dim(OpenMLRunEvaluations[grepl("mlr", OpenMLRunEvaluations$flow_name), ])
OpenMLRunEvaluationsData <- as.data.table(OpenMLRunEvaluations)
library(data.table)
OpenMLRunEvaluationsData <- as.data.table(OpenMLRunEvaluations)
MLRRunEvaluationsData <- OpenMLRunEvaluationsData[grepl("mlr", OpenMLRunEvaluationsData$flow_name), ])
MLRRunEvaluationsData <- OpenMLRunEvaluationsData[grepl("mlr", OpenMLRunEvaluationsData$flow_name), ]
wideDataFormula = run_id + task_id + flow_name + setup_id + flow_id + data_name + upload_time ~ fun
OpenMLMasterData = data.table::dcast(
data = MLRRunEvaluationsData,
formula = form,
value.var = c("value"),
fun.aggregate = mean
)
wideDataFormula = run_id + task_id + flow_name + setup_id + flow_id + data_name + upload_time ~ fun
OpenMLMasterData = data.table::dcast(
data = MLRRunEvaluationsData,
formula = wideDataFormula,
value.var = c("value"),
fun.aggregate = mean
)
names(OpenMLRunEvaluations)
OpenMLWideData = data.table::dcast(
data = MLRRunEvaluationsData,
formula = wideDataFormula,
value.var = c("value"),
fun.aggregate = mean
)
OpenMLMasterData <-
merge(x = sampledata,
y = tasks,
by.x = "task_id",
by.y = "task.id")
names(OpenMLMasterData)
OpenMLMasterData <-
merge(x = OpenMLWideData,
y = tasks,
by.x = "task_id",
by.y = "task.id")
names(OpenMLMasterData)
str(OpenMLMasterData)
as.data.frame(table(OpenMLMasterData$average_cost)
)
unique(OpenMLMasterData$average_cost)
as.data.frame(table(OpenMLMasterData$scimark_benchmark))
as.data.frame(table(OpenMLMasterData$total_cost))
as.data.frame(table(OpenMLMasterData$usercpu_time_millis))
str(OpenMLMasterData)
usercpu_time_millis
OpenMLMasterData$usercpu_time_millis
head(as.data.frame(table(OpenMLMasterData$usercpu_time_millis_testing)))
head(as.data.frame(table(OpenMLMasterData$usercpu_time_millis_training)))
tmp <- cor(OpenMLMasterData)
tmp <- cor(OpenMLMasterData[sapply(OpenMLMasterData, is.numeric)])
x <- as.data.frame(OpenMLMasterData)
t <- cor(x[sapply(x, is.numeric)])
t
?cor
str(OpenMLMasterData)
OpenMLMasterData <- OpenMLMasterData[,c(-task_id, -run_id, -setup_id)]
str(OpenMLMasterData)
OpenMLMasterData <-
merge(x = OpenMLWideData,
y = tasks,
by.x = "task_id",
by.y = "task.id")
-task_id, -run_id, -setup_id,
OpenMLMasterData <- OpenMLMasterData[,c(-data_name, -upload_time, average_cost, -scimark_benchmark, -total_cost, -data.id, -name, -status, -format,  )]
- task_id,-run_id,-setup_id,
OpenMLMasterData <-
OpenMLMasterData[, c(
-data_name,
-upload_time,
-average_cost,
-scimark_benchmark,
-total_cost,
-data.id,
-name,
-status,
-format
)]
names(OpenMLMasterData)
OpenMLMasterData <-
OpenMLMasterData[, c(        -1,-2,-4,        -6,
-7,
-9,
-24,
-25,
-30,
-31,
-32,
-33
)]
str(OpenMLMasterData)
summary(OpenMLMasterData)
dim(OpenMLMasterData)
colMeans(is.na(OpenMLMasterData))
names(OpenMLMasterData)
as.data.frame(colMeans(is.na(OpenMLMasterData)))
OpenMLMasterData <-
OpenMLMasterData[, c(1,2,3,21 , 22, 24, 31:40 )]
str(OpenMLMasterData)
summary(OpenMLMasterData)
names(OpenMLMasterData)
OpenMLMasterData$flow_id <- as.factor(OpenMLMasterData$flow_id)
OpenMLMasterData$flow_name <- as.factor(OpenMLMasterData$flow_name)
OpenMLMasterData$task.type <- as.factor(OpenMLMasterData$task.type)
str(OpenMLMasterData)
OpenMLMasterData$estimation.procedure <-
as.factor(OpenMLMasterData$estimation.procedure)
OpenMLMasterData$target.feature <-
as.factor(wideData$target.feature)
str(OpenMLMasterData)
table(tasks$task.type)
training <- sample(nrow(OpenMLMasterData), nrow(OpenMLMasterData) * 0.8)
training
OpenMLMasterTrainingData <- OpenMLMasterData[training, ]
head(OpenMLMasterTrainingData)
rm(cleanWideData, fit, flow, MLRRunEvaluationsData, OpenMLMasterData, OpenMLRunEvaluationsData, OpenMLWideData, run.results, sampledata,t)
rm(wideData, x, wideDataFormula)
names(OpenMLMasterTrainingData)
unique(OpenMLMasterTrainingData$flow_id)
sort(unique(OpenMLMasterTrainingData$flow_name))
gsub("\\s*\\([^\\)]+\\)","", OpenMLMasterTrainingData$flow_name)
set.seed(1)
OpenMLMasterTrainingData$flow_name_fixed <- gsub("\\s*\\([^\\)]+\\)","", OpenMLMasterTrainingData$flow_name)
sort(unique(OpenMLMasterTrainingData$flow_name))
sort(unique(OpenMLMasterTrainingData$flow_name_fixed))
str(OpenMLMasterTrainingData$flow_name_fixed)
OpenMLMasterTrainingData$flow_name_fixed <- as.factor(OpenMLMasterTrainingData$flow_name_fixed)
str(OpenMLMasterTrainingData$flow_name_fixed)
str(OpenMLRunEvaluations)
str(OpenMLMasterTrainingData)
OpenMLMasterTrainingData$area_under_roc_curve
as.integer(OpenMLMasterTrainingData$area_under_roc_curve)
as.integer(OpenMLMasterTrainingData$area_under_roc_curve * 10)
OpenMLMasterTrainingData$area_under_roc_curve
ceiling(OpenMLMasterTrainingData$area_under_roc_curve)
ceiling(OpenMLMasterTrainingData$area_under_roc_curve*10)
round(OpenMLMasterTrainingData$area_under_roc_curve*10)
OpenMLMasterTrainingData$area_under_roc_curve
OpenMLMasterTrainingData$AreaUnderCurveRounded <- round(OpenMLMasterTrainingData$area_under_roc_curve*10)
str(OpenMLMasterTrainingData)
unique(OpenMLMasterTrainingData$target.feature)
predictorFormula <-
flow_name_fixed ~ AreaUnderCurveRounded + majority.class.size + max.nominal.att.distinct.values + minority.class.size + number.of.classes + number.of.features + number.of.instances + number.of.instances.with.missing.values +  number.of.missing.values + number.of.numeric.features + number.of.symbolic.features
predictorFormulaNaive <-
flow_name_fixed ~ AreaUnderCurveRounded
str(OpenMLMasterTrainingData)
fit <-
rpart(
predictorFormulaNaive,
method = "class",
data = OpenMLMasterTrainingData
)
library(rpart)
fit <-
rpart(
predictorFormulaNaive,
method = "class",
data = OpenMLMasterTrainingData
)
# plot tree
plot(fit, uniform = TRUE,
main = "Algorithm Selection Tree for AUC")
text(fit,
use.n = TRUE,
all = TRUE,
cex = .8)
fit <-
rpart(
predictorFormulaNaive,
method = "class",
data = OpenMLMasterTrainingData,
control=rpart.control(minsplit=2, cp=0)
)
# plot tree
plot(fit, uniform = TRUE,
main = "Algorithm Selection Tree for AUC")
text(fit,
use.n = TRUE,
all = TRUE,
cex = .8)
?text
# plot tree
plot(fit, uniform = TRUE,
main = "Algorithm Selection Tree for AUC")
text(fit,
all = TRUE,
cex = .8)
# plot tree
plot(fit, uniform = TRUE,
main = "Algorithm Selection Tree for AUC")
text(fit,
cex = .8)
text(fit,
all = TRUE,
cex = .8)
# plot tree
plot(fit, uniform = TRUE,
main = "Algorithm Selection Tree for AUC")
text(fit,
cex = .8)
# plot tree
plot(fit, uniform = TRUE,
main = "Algorithm Selection Tree for AUC")
text(fit,
cex = 1)
# plot tree
plot(fit, uniform = TRUE,
main = "Algorithm Selection Tree for AUC")
text(fit,
cex = .75)
fancyRpartPlot(fit)
library(rattle)
fancyRpartPlot(fit)
?fancyRpartPlot
?rpart.plot
fancyRpartPlot(fit, type = 0)
fancyRpartPlot(fit, type = 1)
fancyRpartPlot(fit, type = 2)
fancyRpartPlot(fit, type = 3)
fancyRpartPlot(fit, type = 4)
fancyRpartPlot(fit, type = 5)
fancyRpartPlot(fit, type = 5, extra = 0)
fancyRpartPlot(fit, extra = 0)
?fancyRpartPlot
?prp
fancyRpartPlot(fit, type = 5, extra = 0)
# plot tree
plot(fit, uniform = TRUE,
main = "Algorithm Selection Tree for AUC")
text(fit,
use.n = TRUE,
all = TRUE,
cex = .8)
text(fit,
all = TRUE,
cex = .8)
# plot tree
plot(fit, uniform = TRUE,
main = "Algorithm Selection Tree for AUC")
text(fit,
all = TRUE,
cex = .8)
text(fit,
cex = .8)
text(fit,
cex = .75)
# plot tree
plot(fit, uniform = TRUE,
main = "Algorithm Selection Tree for AUC")
text(fit,
cex = .75)
rpart.plot::rpart.plot(fir)
rpart.plot::rpart.plot(fit)
rpart.plot::rpart.plot(fit, extra = 0)
rpart.plot::rpart.plot(fit, extra = 1)
rpart.plot::rpart.plot(fit, extra = 2)
rpart.plot::rpart.plot(fit, extra = 3)
rpart.plot::rpart.plot(fit, extra = 2)
rpart.plot::rpart.plot(fit, extra = 3)
rpart.plot::rpart.plot(fit, extra = 4)
rpart.plot::rpart.plot(fit, extra = 5)
rpart.plot::rpart.plot(fit, extra = 6)
rpart.plot::rpart.plot(fit, extra = 7)
rpart.plot::rpart.plot(fit, extra = 2)
rpart.plot::rpart.plot(fit, extra = 3)
rpart.plot::rpart.plot(fit, extra = 1)
rpart.plot::rpart.plot(fit, extra = 0)
rpart.plot::rpart.plot(fit, extra = 2)
rpart.plot::rpart.plot(fit, extra = 0)
fit <-
rpart(
predictorFormulaNaive,
method = "class",
data = OpenMLMasterTrainingData,
control=rpart.control(minsplit=2, cp=0)
)
rpart.plot::rpart.plot(fit, extra = 0)
predictorFormulaNaive <-
flow_name_fixed ~ AreaUnderCurveRounded + majority.class.size + max.nominal.att.distinct.values
fit <-
rpart(
predictorFormulaNaive,
method = "class",
data = OpenMLMasterTrainingData,
control=rpart.control(minsplit=2, cp=0)
)
rpart.plot::rpart.plot(fit, extra = 0)
fit <-
rpart(
predictorFormulaNaive,
method = "class",
data = OpenMLMasterTrainingData
#control=rpart.control(minsplit=2, cp=0)
)
rpart.plot::rpart.plot(fit, extra = 0)
fit <-
rpart(
predictorFormulaNaive,
method = "class",
data = OpenMLMasterTrainingData,
control=rpart.control(minsplit=10, cp=0)
)
rpart.plot::rpart.plot(fit, extra = 100)
fit <-
rpart(
predictorFormulaNaive,
method = "class",
data = OpenMLMasterTrainingData,
control=rpart.control(cp=0)
)
rpart.plot::rpart.plot(fit, extra = 100)
fit <-
rpart(
predictorFormulaNaive,
method = "class",
data = OpenMLMasterTrainingData,
control=rpart.control(cp=0.005)
)
rpart.plot::rpart.plot(fit, extra = 100)
fit <-
rpart(
predictorFormulaNaive,
method = "class",
data = OpenMLMasterTrainingData,
control=rpart.control(cp=0.0025)
)
rpart.plot::rpart.plot(fit, extra = 100)
predictorFormulaNaive <-
flow_name_fixed ~
AreaUnderCurveRounded +
majority.class.size +
max.nominal.att.distinct.values +
minority.class.size +
number.of.classes
